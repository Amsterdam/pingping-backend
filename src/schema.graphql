type Mutation {
  registerDevice (input:RegisterDeviceInput!):RegisterDeviceResponse!
  updateTask (input:UpdateTaskInput!):UpdateTaskResponse!
  claimReward (rewardId:String!):ClaimRewardResponse!
}

type Query {
  getCurrentRoutes: [UserRouteResponse]!
  getAvailableRoutes: [RouteResponse]!
  getStatus: StatusResponse!
  getAchivements: [UserAchivementResponse]
  getAvailableRewards: [RewardResponse]
  getCurrentRewards: [UserRewardResponse]
}

# Response
type UserTaskResponse {
  taskId: String!
  title: String!
  status: TaskStatus!
  description: String
  answer: String
  icon: String
  type: TaskType!
  progressPercentile: Int
}

type StatusResponse {
  user: UserResponse!
  currentTask: UserTaskResponse
  currentRoute: UserRouteResponse
  balance: Int!
}

type RouteResponse {
  routeId: String!
  title: String!
  description: String
  imageUrl: String
}

type RewardResponse {
  rewardId: String!
  title: String!
  description: String
  imageUrl: String
  price: Int!
  status: RewardStatus!
}

type UserRewardResponse {
  rewardId: String!
  title: String!
  description: String
  imageUrl: String
  status: RewardStatus!
  barcodeImageUrl: String!
}

type ClaimRewardResponse {
  rewardId: String!
  status: RewardStatus!
}

type UserAchivementResponse {
  achivementId: String!
  title: String!
  description: String
  points: Int!
  status: AchivementStatus!
  icon: String
  earnedDate: Date
}

type UserRouteResponse {
  routeId: String!
  title: String!
  progress: Int
  status: UserRouteStatus!
  tasks: [UserTaskResponse]
}

type UserResponse {
  id: String!
  profile: UserProfileResponse!
}

type UserProfileResponse {
  dateOfBirth: Date
}

type RegisterDeviceResponse {
  accessToken: String!
  user: UserResponse!
  currentTask: UserTaskResponse
}

type UpdateTaskResponse {
  previousTask: UserTaskResponse
  nextTask: UserTaskResponse
}

# Input
input UpdateTaskInput {
  taskId: String!
  answer: RouteAnswer
}

# Dynamic type for an task answer
scalar RouteAnswer

input RegisterDeviceInput {
  deviceId: String!
  deviceOs: String
  deviceType: String
  locale: Locale
  location: LocactionInput
}

input LocactionInput {
  lat: Float,
  lon: Float
}

# Scalar
scalar Date

# enums
enum Locale {
  nl_NL
}

enum RouteStatus {
  Available
  Unavailable
}

enum UserRouteStatus {
  Active
  Completed
}

enum TaskStatus {
  Completed
  PendingUser
}

enum TaskType {
  DateOfBirth
  YesOrNo
}

enum AchivementStatus {
  AvailableToEarn
  Earned
}

enum RewardStatus {
  AvailableToClaim
  Claimed
  ClaimedAndUsed
  Expired
}