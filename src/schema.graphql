type Mutation {
  registerDevice (input:RegisterDeviceInput!):RegisterDeviceResponse!
  updateTask (input:UpdateTaskInput!):UpdateTaskResponse!
}

type Query {
  getCurrentRoutes: [UserRouteResponse]!
  getAvailableRoutes: [RouteResponse]!
}

# Response
type UserTaskResponse {
  taskId: String
  title: String!
  status: TaskStatus
  description: String
  answer: String
  icon: String
  type: TaskType
}

type RouteResponse {
  title: String!
}

type UserRouteResponse {
  title: String!
  progress: Int
  tasks: [UserTaskResponse]
}

type UserResponse {
  id: String!
  profile: UserProfileResponse!
}

type UserProfileResponse {
  dateOfBirth: Date
}

type RegisterDeviceResponse {
  accessToken: String!
  user: UserResponse!
  currentProgress: Int
  currentTask: UserTaskResponse
}

type UpdateTaskResponse {
  previousTask: UserTaskResponse
  nextTask: UserTaskResponse
}

# Input
input UpdateTaskInput {
  taskId: String!
  answer: String
}

# union AnswerInput = StringAnswerInput | BooleanAnswerInput

# input StringAnswerInput {
#   value: String
# }

# input BooleanAnswerInput {
#   value: Boolean
# }

input RegisterDeviceInput {
  deviceId: String!
  deviceOs: String
  deviceType: String
  locale: Locale
  location: LocactionInput
}

input LocactionInput {
  lat: Float,
  lon: Float
}

# Scalar
scalar Date

# enums
enum Locale {
  nl_NL
}

enum TaskStatus {
  Completed
  PendingUser
}

enum TaskType {
  DateOfBirth
  YesOrNo
}