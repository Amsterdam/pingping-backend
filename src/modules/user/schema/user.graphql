type Query {
  getStatus: StatusResponse!
  getAchievements: [AchievementResponse!]!
}

type Mutation {
  createGoal(input: CreateGoalInput!): UserGoalResponse!
  deleteUser(confirm: String): MessageResponse
  registerNotifications(input: RegisterNotificationsInput!): DeviceResponse!
  contact(input: ContactInput): String
}

# Response
type MessageResponse {
  message: String!
}

type ExportResponse {
  token: String!
}

type StatusResponse {
  user: UserResponse!
  currentTask: UserTaskResponse
  previousTask: UserTaskResponse
  exportToken: String!
  device: DeviceResponse!
}

type UserGoalResponse {
  id: String!
  title: String!
  description: String
  amount: Int!
}

type AchievementResponse {
  achievementId: String!
  title: String!
  description: String
  points: Int!
  status: AchievementStatus!
  icon: String
  earnedDate: Date
}

type UserResponse {
  id: String!
  profile: UserProfileResponse!
  balance: Int!
  goals: [UserGoalResponse!]
  rewards: [UserRewardResponse!]
  devices: [DeviceResponse!]
  createdAt: String!
}

type DeviceResponse {
  id: String!
  token: String
  os: String
  notificationStatus: NotificationStatus
}

type UserProfileResponse {
  dateOfBirth: Date
  fullName: String
}

# Input
input CreateGoalInput {
  title: String!
  description: String
  amount: Int!
}

input RegisterNotificationsInput {
  notificationStatus: NotificationStatus!
  deviceToken: String!
}

# Enum
enum UserRole {
  User
  Admin
}
