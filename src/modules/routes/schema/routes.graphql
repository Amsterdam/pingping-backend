type Mutation {
  updateTask(input: UpdateTaskInput!): UpdateTaskResponse!
  createRouteFeedback(input: RouteFeedbackInput!): RouteFeedbackResponse!
}

type Query {
  getRoutes: GetRoutesResponse!
}

# Response
type GetRoutesResponse {
  currentRoutes: [RouteResponse!]
  availableRoutes: [RouteResponse!]
  archivedRoutes: [RouteResponse!]
}

type UserTaskResponse {
  status: TaskStatus!
  task: TaskResponse!
  answer: String
}

type TaskResponse {
  taskId: String!
  title: String!
  headerTitle: String!
  description: String
  media: String
  choices: Choices
  progress: Float
  type: TaskType!
}

type RouteResponse {
  routeId: String!
  title: String!
  description: String
  coverImageUrl: String
  isSuggested: Boolean!
  numberOfSteps: Int!
  totalPoints: Int!
  targetAudience: String!
  tips: [RouteTip!]
  progress: Float
  tasks: [UserTaskResponse]
}

# type UserRouteResponse {
#   route: RouteResponse!
#   progress: Float
#   status: UserRouteStatus!
#   tasks: [UserTaskResponse]
# }

type UpdateTaskResponse {
  previousTask: UserTaskResponse
  nextTask: UserTaskResponse
}

type RouteFeedbackResponse {
  taskName: String!
  feedback: String!
}

type RouteTip {
  title: String!
  description: String!
}

# Input
input UpdateTaskInput {
  taskId: String!
  answer: String
}

input RouteFeedbackInput {
  routeId: String!
  taskName: String!
  feedback: String!
}
