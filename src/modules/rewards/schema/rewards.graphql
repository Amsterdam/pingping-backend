type Mutation {
  claimReward(rewardId: String!): UserRewardResponse!
  updateReward(id: String, vouchers: [RewardVoucherInput]): RewardResponse!
}

type Query {
  getAvailableRewards: [RewardResponse!]!
  getRewards: [RewardResponse!]!
}

# Models
# type UserReward @entity {
#   rewardId: String! @column
#   status: RewardStatus! @column
#   price: Int! @column
# }

# Response
type RewardResponse {
  rewardId: String!
  title: String!
  description: String
  imageUrl: String
  thumbnailUrl: String
  price: Int!
  status: RewardStatus!
  vouchers: [RewardVoucherResponse]
}

type UserRewardResponse {
  id: String!
  reward: RewardResponse!
  status: RewardStatus!
  barcodeImageUrl: String
  data: JSON
}

type RewardVoucherResponse {
  id: String!
  userId: String
  data: JSON
}

input RewardVoucherInput {
  id: String
  userId: String
  data: JSON
}

enum RewardStatus {
  AvailableToClaim
  Claimed
  ClaimedAndUsed
  Expired
  NotAvailable
}

enum RewardType {
  Voucher
  SelfIssued
}
