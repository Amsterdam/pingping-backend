type Query {
  adminStatistics(week: String): AdminStatisticsResponse!
  adminGetUsers(roles: [UserRole!]): [AdminUserResponse]!
  adminGetAuditLog: [AuditLogResponse!]
  adminGetFeedback: [RouteFeedbackResponse!]
  getNotifications: [NotificationResponse!]!
}

type Mutation {
  adminActions(type: AdminActionType!): String!
  adminSendNotifications(title: String!, body: String!, recipients: [NotificationRecipient!]!): JSON!
  adminCreateUser(input: CreateUserInput): UserResponse!
  adminDeleteUser(id: String!): String!
  "Admin: Login with email & password"
  adminLogin(email: String!, password: String!, deviceId: String!): LoginResponse!
  adminDeleteRewardVoucher(id: String): MessageResponse!
}

# Response
type AdminStatisticsResponse {
  usersPerWeek: Statistics!
  usersCumulative: Statistics!
  completedTasks(week: String): Statistics!
  routes: [RouteStatistics!]
  activeUsers: StatisticNumberChange!
  totalUsers: StatisticNumberChange!
  usersPerYearOfBirth(week: String): Statistics!
  userPerMonthOfBirth(week: String, minAge: Int = 15, maxAge: Int = 22): Statistics!
  skippedOnboarding: StatisticNumberChange!
}

type NotificationResponse {
  id: String!
  createdAt: Date!
  type: NotificationType!
  status: NotificationDeliveryStatus!
}

type RouteStatistics {
  title: String!
  data: Statistics!
}

type StatisticNumberChange {
  current: Int!
  percentile: Float
  change: Float
}

type Statistics {
  dump: JSON
  values: [Int!]
  keys: [String!]
}

type LoginResponse {
  accessToken: String!
  user: UserResponse!
}

type AuditLogResponse {
  createdAt: Date
  user: UserResponse
  type: AuditLogType!
  description: String!
}

type AdminUserResponse {
  id: String!
  devices: [DeviceResponse!]
  role: UserRole
  balance: Int!
  email: String
  routes: [AdminUserRouteResponse!]
  profile: UserProfileResponse
  userTasks: [UserTaskResponse!]
  createdAt: String!
  activeAt: String
  rewards: JSON
  transactions: JSON
}

type AdminUserRouteResponse {
  status: UserRouteStatus!
}

# Input
input NotificationRecipient {
  userId: String!
  token: String!
}

input CreateUserInput {
  email: String!
  fullName: String!
  password: String!
  role: UserRole!
}

# Enum
enum AdminActionType {
  FixUsers
  DeleteAllUsers
}

enum AuditLogType {
  ViewUser
  DeleteUser
  CreateUser
  AdminLogin
  UpdateReward
  SendNotifications
}
